# -*- coding: utf-8 -*-

"""
/***************************************************************************
 BrdrQ
                                 A QGIS plugin
 brdrQ, a QGIS-plugin for aligning thematic borders to reference borders.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-11
        copyright            : (C) 2024 by Karel Dieussaert / Onroerend Erfgoed
        email                : karel.dieussaert@vlaanderen.be
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Karel Dieussaert / Onroerend Erfgoed'
__date__ = '2024-10-11'
__copyright__ = '(C) 2024 by Karel Dieussaert / Onroerend Erfgoed'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import inspect
import os
import sys

from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox
from brdr.loader import DictLoader
from qgis.core import QgsApplication
from shapely.io import from_wkt

from .brdrq_provider import BrdrQProvider

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

import brdr
# try:
#     import brdr
# except:
#     import brdr
#     print("Module brdr not found. Please install it manually: pip install brdr==0.4.0")

from brdr.aligner import Aligner
from brdr.grb import GRBActualLoader
from brdr.enums import GRBType


class BrdrQPlugin(object):

    def __init__(self, iface):
        self.provider = None
        self.iface = iface

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""
        self.provider = BrdrQProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        self.initProcessing()
        icon = os.path.join(os.path.join(cmd_folder, 'icon.png'))
        self.action = QAction(QIcon(icon), 'brdrQ - Align borders', self.iface.mainWindow())
        self.iface.addToolBarIcon(self.action)
        self.action.triggered.connect(self.run)

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        self.iface.removeToolBarIcon(self.action)
        del self.action

    def run(self):
        brdr_version = str(brdr.__version__)
        # take active layer
        layer = self.iface.activeLayer()
        # take selected feature(s)
        # run brdr (to actual GRB) for this feature
        list = []
        aligner = Aligner()


        for feature in layer.selectedFeatures():
            feature_geom = feature.geometry()
            break
        wkt = feature_geom.asWkt()
        geom_shapely = from_wkt(wkt)
        # Load thematic &reference data
        loader = DictLoader({'1': geom_shapely})
        aligner.load_thematic_data(loader)
        loader = GRBActualLoader(grb_type=GRBType.ADP, partition=1000, aligner=aligner)
        aligner.load_reference_data(loader)
        dict_series, dict_predictions, diffs_dict = aligner.predictor()
        for predicted_dist, result in dict_predictions['1'].items():
            resulting_geom = result['result']
            break



        mb = QMessageBox()
        mb.setText('Brdr_version: ' + brdr_version + "//Predicted geometry at : " + str(
            predicted_dist) + " // Found wkt: " + str(resulting_geom.wkt))
        mb.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        return_value = mb.exec()
        if return_value == QMessageBox.Ok:
            print(str(resulting_geom.wkt))
        elif return_value == QMessageBox.Cancel:
            print('You pressed Cancel')

        self.iface.messageBar().pushMessage('Brdr_version: ' + brdr_version + "//Predicted geometry at : " + str(
            predicted_dist) + " // Found wkt: " + str(resulting_geom.wkt))
