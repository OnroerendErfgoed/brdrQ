# -*- coding: utf-8 -*-

"""
/***************************************************************************
 BrdrQ
                                 A QGIS plugin
 brdrQ, a QGIS-plugin for aligning thematic borders to reference borders.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-10-11
        copyright            : (C) 2024 by Karel Dieussaert / Onroerend Erfgoed
        email                : karel.dieussaert@vlaanderen.be
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = "Karel Dieussaert / Onroerend Erfgoed"
__date__ = "2024-10-11"
__copyright__ = "(C) 2024 by Karel Dieussaert / Onroerend Erfgoed"

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = "$Format:%H$"

import inspect
import os
import sys

import brdr
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction
from qgis import processing
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import QgsApplication

from .brdrq_dockwidget_bulkaligner import brdrQDockWidgetBulkAligner
from .brdrq_dockwidget_featurealigner import brdrQDockWidgetFeatureAligner
from .brdrq_provider import BrdrQProvider

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
    sys.path.insert(0, cmd_folder)

pluginname = "brdrQ"


class BrdrQPlugin(object):

    def __init__(self, iface):
        print("init plugin")
        self.provider = None
        self.iface = iface
        self.dockwidget_featurealigner = None
        self.dockwidget_bulkaligner = None
        self.actions = []
        self.toolbar = self.iface.addToolBar(pluginname)
        self.toolbar.setObjectName(pluginname)


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate(pluginname, message)

    def initProcessing(self):
        """Init Processing provider for QGIS >= 3.8."""

        self.provider = BrdrQProvider()
        QgsApplication.processingRegistry().addProvider(self.provider)

    def initGui(self):
        # print ("initGui")
        self.initProcessing()

        #FEATUREPREDICTOR
        icon = os.path.join(os.path.join(cmd_folder, "icon_featurealigner.png"))
        action_featurepredictor = QAction(
            QIcon(icon), "brdrQ - Feature Aligner (predictor)", self.iface.mainWindow()
        )
        action_featurepredictor.triggered.connect(self.openDock)
        self.iface.addPluginToMenu(pluginname, action_featurepredictor)
        self.toolbar.addAction(action_featurepredictor)
        self.actions.append(action_featurepredictor)

        # #BULKALIGNER
        # icon_bulkaligner = os.path.join(os.path.join(cmd_folder, "icon_bulkaligner.png"))
        # action_bulkaligner = QAction(
        #     QIcon(icon_bulkaligner), "brdrQ - Bulk Aligner (predictor)", self.iface.mainWindow()
        # )
        # action_bulkaligner.triggered.connect(self.openDockBulkAligner)
        # self.iface.addPluginToMenu(pluginname, action_bulkaligner)
        # self.toolbar.addAction(action_bulkaligner)
        # self.actions.append(action_bulkaligner)


        #AUTOCORRECTBORDERS
        icon_autocorrectborders = os.path.join(
            os.path.join(cmd_folder, "icon_autocorrectborders.png")
        )
        action_autocorrectborders = QAction(
            QIcon(icon_autocorrectborders),
            "Autocorrectborders (bulk)",
            self.iface.mainWindow(),
        )
        action_autocorrectborders.triggered.connect(self.openAutocorrectbordersscript)
        self.iface.addPluginToMenu(pluginname, action_autocorrectborders)
        self.toolbar.addAction(action_autocorrectborders)
        self.actions.append(action_autocorrectborders)


        #AUTOUPDATEBORDERS -GRBUPDATER
        icon_autoupdateborders = os.path.join(
            os.path.join(cmd_folder, "icon_grbupdater.png")
        )
        action_autoupdateborders = QAction(
            QIcon(icon_autoupdateborders),
            "GRB Updater (bulk)",
            self.iface.mainWindow(),
        )
        action_autoupdateborders.triggered.connect(self.openAutoupdatebordersscript)
        self.iface.addPluginToMenu(pluginname, action_autoupdateborders)
        self.toolbar.addAction(action_autoupdateborders)
        self.actions.append(action_autoupdateborders)

        icon_info = os.path.join(
            os.path.join(cmd_folder, "icon_info.png")
        )
        action_info = QAction(
            QIcon(icon_info),
            "brdrQ - info (version)",
            self.iface.mainWindow(),
        )
        action_info.triggered.connect(self.openInfo)
        self.iface.addPluginToMenu(pluginname, action_info)
        self.toolbar.addAction(action_info)
        self.actions.append(action_info)

    def openAutocorrectbordersscript(self):
        processing.execAlgorithmDialog("brdrqprovider:brdrqautocorrectborders")

    def openInfo(self):
        msg = f"brdrQ version: {self.version()} - brdr-version: {str(brdr.__version__)}"
        self.iface.messageBar().pushMessage(msg)

    def version(self):
        return "0.9.12-dev"

    def openAutoupdatebordersscript(self):
        processing.execAlgorithmDialog("brdrqprovider:brdrqautoupdateborders")

    def unload(self):
        QgsApplication.processingRegistry().removeProvider(self.provider)
        for action in self.actions:
            self.iface.removeToolBarIcon(action)
            self.toolbar.removeAction(action)
            self.iface.removePluginMenu(pluginname, action)
            del action
        # remove the toolbar
        del self.toolbar


    def openDockBulkAligner(self):
        print("openDockBulkAligner")
        print (str(self.dockwidget_bulkaligner))
        if self.dockwidget_bulkaligner is None:
            # Create the dockwidget (after translation) and keep reference
            self.dockwidget_bulkaligner = brdrQDockWidgetBulkAligner(self)
            print("brdrQDockWidgetBulkAligner created")
        print(str(self.dockwidget_bulkaligner.active))
        if not self.dockwidget_bulkaligner.active:
            self.dockwidget_bulkaligner.activate()
        return

    def openDock(self):
        print("openDock")
        if self.dockwidget_featurealigner is None:
            # Create the dockwidget (after translation) and keep reference
            self.dockwidget_featurealigner = brdrQDockWidgetFeatureAligner(self)
            print("brdrQDockWidget created")
        print(str(self.dockwidget_featurealigner.active))
        if not self.dockwidget_featurealigner.active:
            self.dockwidget_featurealigner.activate()
        return







