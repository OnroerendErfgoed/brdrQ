
from qgis.core import (
    QgsCoordinateReferenceSystem,
    QgsPointXY,
    QgsProject,
    QgsCoordinateTransform,
)

WGS84 = QgsCoordinateReferenceSystem.fromEpsgId(4326)


def maybe_transform_wgs84(
    point: QgsPointXY, own_crs: QgsCoordinateReferenceSystem, direction: int
) -> QgsPointXY:
    """
    Transforms the ``point`` to (``direction=ForwardTransform`) or from
    (``direction=ReverseTransform`) WGS84.
    """
    project = QgsProject.instance()
    out_point = point
    if own_crs != WGS84:
        xform = QgsCoordinateTransform(own_crs, WGS84, project)
        point_transform = xform.transform(point, direction)
        out_point = point_transform

    return out_point


import json
from typing import List, Tuple, Optional

from qgis.PyQt.QtNetwork import QNetworkRequest
from qgis.PyQt.QtCore import QUrlQuery, QUrl
from qgis.core import QgsNetworkAccessManager, QgsPointXY


class Nominatim:
    URL = "https://nominatim.openstreetmap.org/reverse"

    def __init__(self):
        self.nam = QgsNetworkAccessManager()

        # has public access methods
        self._status_code = 0
        self._error_string = ""

        # completely private
        self._content = dict()

    def do_request(self, point: QgsPointXY) -> None:
        query = QUrlQuery()
        query.addQueryItem("lat", str(point.y()))
        query.addQueryItem("lon", str(point.x()))
        query.addQueryItem("format", "json")

        url = QUrl(self.URL)
        url.setQuery(query)

        request = QNetworkRequest(url)
        request.setHeader(
            QNetworkRequest.UserAgentHeader, "PyQGIS@GIS-OPS.com"
        )

        response = self.nam.blockingGet(request)
        self._status_code = response.attribute(
            QNetworkRequest.HttpStatusCodeAttribute
        )
        self._content = json.loads(bytes(response.content()))
        if self._content.get("error"):
            self._error_string = self._content["error"]
            return

    def get_point(self) -> Optional[QgsPointXY]:
        if self._error_string:
            return None
        return QgsPointXY(
            float(self._content["lon"]), float(self._content["lat"])
        )

    def get_bbox_points(self) -> Optional[Tuple[QgsPointXY, QgsPointXY]]:
        if self._error_string:
            return None
        res_bbox: List[float] = [
            float(coord) for coord in self._content["boundingbox"]
        ]
        min_y, max_y, min_x, max_x = res_bbox

        return QgsPointXY(min_x, min_y), QgsPointXY(max_x, max_y)

    def get_attributes(self) -> Optional[Tuple[str, str]]:
        if self._error_string:
            return None
        return self._content["display_name"], self._content["licence"]

    @property
    def status_code(self):
        return self._status_code

    @property
    def error_string(self):
        return self._error_string

from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtGui import QCursor, QIcon
from qgis.PyQt.QtWidgets import QApplication

from qgis.gui import QgsMapToolEmitPoint, QgsMapMouseEvent
from qgis.core import QgsCoordinateTransform


# CURSOR_ICON = QIcon(":images/themes/default/cursors/mCapturePoint.svg")
# CUSTOM_CURSOR = QCursor(CURSOR_ICON.pixmap(48, 48))


class PointTool(QgsMapToolEmitPoint):

    canvasClicked = pyqtSignal("QgsPointXY")

    def canvasReleaseEvent(self, event: QgsMapMouseEvent):
        # Get the click and emit a transformed point
        crs_canvas = self.canvas().mapSettings().destinationCrs()
        self.canvasClicked.emit(
            maybe_transform_wgs84(
                event.mapPoint(),
                crs_canvas,
                QgsCoordinateTransform.ForwardTransform,
            )
        )

    def activate(self):
        super().activate()
        #QApplication.setOverrideCursor(CUSTOM_CURSOR)

# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickApiDialog
                                 A QGIS plugin
 Query OpenElevation API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-12
        git sha              : $Format:%H$
        copyright            : (C) 2021 by GIS-OPS UG
        email                : info@gis-ops.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os

from qgis.PyQt.QtWidgets import QMessageBox, QApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.gui import QgisInterface, QgsMapTool
from qgis.core import (
    QgsCoordinateReferenceSystem,
    QgsProject,
    QgsPointXY,
    QgsVectorLayer,
    QgsFeature,
    QgsGeometry,
    QgsRectangle,
    QgsCoordinateTransform,
)




from .quick_api_dialog_base import Ui_QuickApiDialogBase

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "quick_api_dialog_base.ui")
)


class QuickApiDialog(QtWidgets.QDialog, Ui_QuickApiDialogBase):
    def __init__(self, iface: QgisInterface, parent=None):
        """Constructor."""
        super(QuickApiDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface

        # Instantiate a network access manager
        self.nominatim = Nominatim()
        self.point_tool = PointTool(iface.mapCanvas())
        self.last_map_tool: QgsMapTool = None

        # Set up widgets
        self.map_button.setIcon(
            QIcon(":images/themes/default/cursors/mCapturePoint.svg")
        )
        self.crs_input.setCrs(QgsCoordinateReferenceSystem("EPSG:4326"))

        # Set up callbacks
        self.finished.connect(self.request_geocoder)
        self.map_button.clicked.connect(self._on_map_click)
        self.point_tool.canvasClicked.connect(self._write_line_widget)
        self.point_tool.deactivated.connect(
            lambda: QApplication.restoreOverrideCursor()
        )

    def request_geocoder(self, result: int):
        # See if OK was pressed
        if result:
            project = QgsProject.instance()
            # First get all the values of the GUI items
            crs_input = self.crs_input.crs()
            lineedit_text = self.lineedit_xy.value()

            # Protect the free text field for coordinates from generic user failure
            try:
                lineedit_yx = [
                    float(coord.strip()) for coord in lineedit_text.split(",")
                ]
            except:
                QMessageBox.critical(
                    self.iface.mainWindow(),
                    "QuickAPI error",
                    "Did you really specify a coordinate in comma-separated Lat/Long?\nExiting...",
                )
                return

            # Create the input point and transform if necessary
            point = maybe_transform_wgs84(
                QgsPointXY(*reversed(lineedit_yx)),
                crs_input,
                QgsCoordinateTransform.ForwardTransform,
            )
            # Do the request and set the attributes
            self.nominatim.do_request(point)

            # Only process if HTTP status code is 200
            if self.nominatim.status_code == 200:
                # Get the content of the response and process it
                if self.nominatim.error_string:
                    QMessageBox.critical(
                        self.iface.mainWindow(),
                        "Quick API error",
                        "The request was not processed succesfully!\n\n"
                        "Message:\n"
                        f"{self.nominatim.error_string}",
                    )
                    return

                # Create the output memory layer
                layer_out = QgsVectorLayer(
                    "Point?crs=EPSG:4326&field=address:string&field=license:string",
                    "Nominatim Reverse Geocoding",
                    "memory",
                )

                # Create the output feature (only one here)
                feature = QgsFeature()
                feature.setGeometry(
                    QgsGeometry.fromPointXY(self.nominatim.get_point())
                )
                feature.setAttributes(list(self.nominatim.get_attributes()))
                # Add feature to layer and layer to map
                layer_out.dataProvider().addFeature(feature)
                layer_out.updateExtents()
                project.addMapLayer(layer_out)

                # build bbox for auto-zoom feature
                bbox_temp = list()
                for p in self.nominatim.get_bbox_points():
                    p = maybe_transform_wgs84(
                        p,
                        project.crs(),
                        QgsCoordinateTransform.ReverseTransform,
                    )
                    bbox_temp.append(p)

                self.iface.mapCanvas().zoomToFeatureExtent(
                    QgsRectangle(*bbox_temp)
                )

    def _on_map_click(self):
        self.hide()
        self.last_map_tool = self.iface.mapCanvas().mapTool()
        self.iface.mapCanvas().setMapTool(self.point_tool)

    def _write_line_widget(self, point: QgsPointXY):
        self.lineedit_xy.setText(f"{point.y():.6f}, {point.x():.6f}")
        self.iface.mapCanvas().setMapTool(self.last_map_tool)
        self.show()